Storing mark share instance as markshare_m_5_n_40_seed_1.prb
Running markshare: m=5, n=40, seed=1, iter=0, nthread=24
[
 [ 20 49 36 46  0  6 15 49  7 11  4 19  9 19 17 33 19 46 26 42 20 15 34 26 10 22 43 11  1 26 33 45 20 22 27 21  7 46  9 38 | 474 ]
 [ 40 35 48 40 15  4 34 25 43 43 44 41  4 41  1 13  8  2 43 33  4 29 21 33 47 20 26  9 34 14 15  7 34 39 41 20  0  1 37 31 | 509 ]
 [ 49 33 37 14 14 22 39 11  5  3 22 23 45  4 14 45 14  5  6 26  0  4 33 45 10 45 13 14 24 29  2 28 28 30  7 47 29 13 34 11 | 438 ]
 [  5 26 20 47 34 24 20 27  2 38 26  2 33  6 25 39 47  1 29 44 45 27  6 22  6 44 40 18 19 26  8 32 46 18 17 28 37 31 36  6 | 503 ]
 [ 44 34 31 32 37 17 17 38 13 17 44 37 21 44 48  0 33 24 31  3  5 39 47  3 22 17 28 47 20 18 11 38 45 38 28 15  0 38 30  7 | 530 ]
]
Running reduced dim shroeppel shamir
Running with 24 threads
Max reducible dimension is 4 (encoded with basis 8001)
Reducing 1 dimensions for Shroeppel-Shamir - leaving 4 for verification
Splitting sets into [0, 9]; [10, 19]; [20, 29]; [30, 40]
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Running the search loop

    1     0.20s [0.000133 GB]:      6 +    468; 2 x 1 possible solutions
    2     0.20s [0.000133 GB]:      7 +    467; 2 x 1 possible solutions
    3     0.21s [0.000133 GB]:      9 +    465; 2 x 2 possible solutions
    4     0.21s [0.000133 GB]:     10 +    464; 2 x 1 possible solutions
    5     0.21s [0.000133 GB]:     13 +    461; 4 x 1 possible solutions
    6     0.21s [0.000133 GB]:     15 +    459; 6 x 2 possible solutions
    7     0.21s [0.000133 GB]:     16 +    458; 2 x 2 possible solutions
    8     0.21s [0.000133 GB]:     17 +    457; 6 x 2 possible solutions
    9     0.21s [0.000133 GB]:     18 +    456; 2 x 4 possible solutions
   10     0.21s [0.000133 GB]:     19 +    455; 10 x 5 possible solutions
   20     0.21s [0.000133 GB]:     29 +    445; 8 x 10 possible solutions
   30     0.22s [0.000134 GB]:     39 +    435; 38 x 18 possible solutions
   40     0.22s [0.000135 GB]:     49 +    425; 72 x 30 possible solutions
   50     0.22s [0.000136 GB]:     59 +    415; 98 x 60 possible solutions
   60     0.23s [0.000138 GB]:     69 +    405; 190 x 114 possible solutions
   70     0.23s [0.000142 GB]:     79 +    395; 300 x 211 possible solutions
   80     0.23s [0.000146 GB]:     89 +    385; 448 x 363 possible solutions
   90     0.24s [0.000152 GB]:     99 +    375; 622 x 562 possible solutions
  100     0.24s [0.000159 GB]:    109 +    365; 888 x 804 possible solutions
  200     0.28s [0.000275 GB]:    209 +    265; 6030 x 6178 possible solutions
Found market share solution from SS-Algorithm!
Subset for index 233 (binary 0000000000000000000000000000000000000000000000000000000011101001): 20, 46, 6, 15, 49
Subset for index 297 (binary 0000000000000000000000000000000000000000000000000000000100101001): 4, 19, 33, 26
Subset for index 189 (binary 0000000000000000000000000000000000000000000000000000000010111101): 20, 34, 26, 10, 22, 11
Subset for index 213 (binary 0000000000000000000000000000000000000000000000000000000011010101): 33, 20, 27, 7, 46
The sum is 136 + 82 + 123 + 133 = 474
Writing solution to markshare_m_5_n_40_seed_1.sol
Found feasible solution!
Eval GPU: check results     	 total time     0.03s
Eval GPU: binary search     	 total time     0.01s
Eval GPU: sort required     	 total time     0.03s
Candidate extraction        	 total time     0.01s
List traversal              	 total time     0.09s
Solution time               	 total time     0.29s
Evaluate solutions GPU      	 total time     0.08s
Setup time                  	 total time     0.20s
