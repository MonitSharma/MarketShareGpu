Storing mark share instance as markshare_m_6_n_50_seed_2.prb
Running markshare: m=6, n=50, seed=2, iter=0, nthread=24
[
 [ 26 11  1 55 32 56 26 29 25 19 19  9 12 41 37  7 17 29 16 37 37 49 31 40  8 29 30 35 11 43 47 15 51 32 29 24 50 10  4 58 30 17  3 17 25  6  5 10  7 29 | 643 ]
 [ 35 33 13 13  6 46 13 34 20 10 28 22 12 28 38 39 28 47 30 39 23 36 47 59 34  7  9  8 42 51 57 30 30 13 53 59 20 18 34 15 25 48 26 21 46 28 32 16 57 47 | 762 ]
 [ 32 48  4 56 21 49 51 30 24 13  1 44 14 25  4 53 59 56 58 30 48 42 36 42 45 28 10 57 17 25 31 19 21 45  2 55 58 42 26 31 30 53 19 33 15 34 23 23 49 55 | 843 ]
 [ 44  0 22 43  0 21 47 12 16 21 34 52  1 21 39 30 23 46 29 54 24 49 21 24 33 37 58 20  6 22 18 57  2 38 44 57 39 48 12 13 25 52 38 35 39 47 10 31 52 58 | 782 ]
 [ 46 34  8 28 52 25 44 35 47  6 32 22 13 12 55 48 35 47 20 33 15 53 54 55 25 58 32 55 36  2 49 43 37 53 10 50 35 32 29 19 32 23 41 16 14 56 11 27  6 51 | 830 ]
 [ 16 12  0  0 37  5 17 10 11 30  5 52 17 47 12 31 17 16 28  1 32 52 50 16 59  8  2 30 13 20 38  9  9 13 52 50 13 43 44  3 39 37 47 17  1 48 13 32 42  1 | 598 ]
]
Running reduced dim shroeppel shamir
Running with 24 threads
Max reducible dimension is 4 (encoded with basis 10001)
Reducing 1 dimensions for Shroeppel-Shamir - leaving 5 for verification
Splitting sets into [0, 11]; [12, 24]; [25, 36]; [37, 50]
Generating 4096 possible subsets for as set of size 12.
Generating 8192 possible subsets for as set of size 13.
Generating 4096 possible subsets for as set of size 12.
Generating 8192 possible subsets for as set of size 13.
Running the search loop

    1     0.80s [0.000985 GB]:     26 +    617; 9 x 1 possible solutions
    2     0.80s [0.000985 GB]:     29 +    614; 10 x 1 possible solutions
    3     0.82s [0.000986 GB]:     30 +    613; 7 x 1 possible solutions
    4     0.82s [0.000986 GB]:     31 +    612; 8 x 1 possible solutions
    5     0.82s [0.000986 GB]:     32 +    611; 10 x 1 possible solutions
    6     0.82s [0.000986 GB]:     33 +    610; 11 x 2 possible solutions
    7     0.82s [0.000986 GB]:     34 +    609; 13 x 1 possible solutions
    8     0.82s [0.000986 GB]:     35 +    608; 17 x 2 possible solutions
    9     0.82s [0.000986 GB]:     36 +    607; 22 x 4 possible solutions
   10     0.82s [0.000986 GB]:     37 +    606; 25 x 3 possible solutions
   20     0.83s [0.000987 GB]:     47 +    596; 42 x 12 possible solutions
   30     0.83s [0.000988 GB]:     57 +    586; 104 x 28 possible solutions
   40     0.83s [0.000991 GB]:     67 +    576; 171 x 66 possible solutions
   50     0.84s [0.000995 GB]:     77 +    566; 323 x 147 possible solutions
   60     0.84s [0.001001 GB]:     87 +    556; 568 x 306 possible solutions
   70     0.84s [0.001009 GB]:     97 +    546; 982 x 593 possible solutions
   80     0.85s [0.001024 GB]:    107 +    536; 1577 x 1031 possible solutions
   90     0.85s [0.001043 GB]:    117 +    526; 2542 x 1714 possible solutions
  100     0.85s [0.001072 GB]:    127 +    516; 3894 x 2796 possible solutions
Found market share solution from SS-Algorithm!
Subset for index 2886 (binary 0000000000000000000000000000000000000000000000000000101101000110): 11, 1, 26, 25, 19, 9
Subset for index 1544 (binary 0000000000000000000000000000000000000000000000000000011000001000): 7, 49, 31
Subset for index 3251 (binary 0000000000000000000000000000000000000000000000000000110010110011): 29, 30, 43, 47, 51, 24, 50
Subset for index 5086 (binary 0000000000000000000000000000000000000000000000000001001111011110): 4, 58, 30, 17, 17, 25, 6, 5, 29
The sum is 91 + 87 + 274 + 191 = 643
Writing solution to markshare_m_6_n_50_seed_2.sol
Found feasible solution!
Eval GPU: check results     	 total time     0.02s
Eval GPU: binary search     	 total time     0.01s
Eval GPU: sort required     	 total time     0.02s
Candidate extraction        	 total time     0.01s
List traversal              	 total time     0.08s
Solution time               	 total time     0.88s
Evaluate solutions GPU      	 total time     0.07s
Setup time                  	 total time     0.80s
