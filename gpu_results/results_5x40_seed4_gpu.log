Storing mark share instance as markshare_m_5_n_40_seed_4.prb
Running markshare: m=5, n=40, seed=4, iter=0, nthread=24
[
 [ 38 36 21  6 38 34 28 24 27 23  8  5 39  8  0 27 10 36 17 25 31  0  7 22 34 14 39 24  6 15 23 32  0 24 15 10  1 25 38 32 | 421 ]
 [ 17  0 37  1 31 37 34 17  6 17  2  2 24  7  6 34 29 33 16 37 21 34 37 33 20 10  4  1  6  9 21  8 20  7 25 12 16  9 25 15 | 360 ]
 [ 15 25 24  8 30  5  7 23 15 14 20 18 27 14 10  3 22 10 24  1 35 37 14  9 25 32  7  5 19  3  7 27 36 37 17 12 33 35 16 27 | 374 ]
 [ 36 14 16 36 13 15 22 33 33 29 34 27 23 26  3  3 23  1  9  3 29  8 35 32 20  4 24  2  2 37 21  6  5 23 24 38 14 14 30  0 | 383 ]
 [  1 20  4 12 27 33 20 37 22  5 33 33 19 31 32 27 20 26 37 37 26  9  5 19 14 37 34  7 14  6  7 38 18 12 15 35 24 21 17 14 | 424 ]
]
Running reduced dim shroeppel shamir
Running with 24 threads
Max reducible dimension is 4 (encoded with basis 8001)
Reducing 1 dimensions for Shroeppel-Shamir - leaving 4 for verification
Splitting sets into [0, 9]; [10, 19]; [20, 29]; [30, 40]
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Running the search loop

    1     0.20s [0.000133 GB]:     29 +    392; 12 x 4 possible solutions
    2     0.20s [0.000133 GB]:     30 +    391; 8 x 4 possible solutions
    3     0.20s [0.000133 GB]:     35 +    386; 20 x 4 possible solutions
    4     0.20s [0.000133 GB]:     36 +    385; 20 x 8 possible solutions
    5     0.20s [0.000133 GB]:     37 +    384; 18 x 4 possible solutions
    6     0.20s [0.000133 GB]:     39 +    382; 22 x 4 possible solutions
    7     0.20s [0.000133 GB]:     40 +    381; 26 x 4 possible solutions
    8     0.20s [0.000133 GB]:     42 +    379; 30 x 4 possible solutions
    9     0.20s [0.000133 GB]:     43 +    378; 28 x 8 possible solutions
   10     0.20s [0.000133 GB]:     44 +    377; 42 x 12 possible solutions
   20     0.21s [0.000134 GB]:     55 +    366; 64 x 12 possible solutions
   30     0.21s [0.000135 GB]:     65 +    356; 142 x 36 possible solutions
   40     0.21s [0.000137 GB]:     75 +    346; 218 x 148 possible solutions
   50     0.21s [0.000140 GB]:     85 +    336; 346 x 204 possible solutions
   60     0.22s [0.000145 GB]:     95 +    326; 578 x 208 possible solutions
   70     0.22s [0.000150 GB]:    105 +    316; 866 x 572 possible solutions
   80     0.22s [0.000159 GB]:    115 +    306; 1202 x 1088 possible solutions
   90     0.23s [0.000171 GB]:    125 +    296; 1632 x 1156 possible solutions
Found market share solution from SS-Algorithm!
Subset for index 40 (binary 0000000000000000000000000000000000000000000000000000000000101000): 6, 34
Subset for index 124 (binary 0000000000000000000000000000000000000000000000000000000001111100): 39, 8, 0, 27, 10
Subset for index 636 (binary 0000000000000000000000000000000000000000000000000000001001111100): 7, 22, 34, 14, 39, 15
Subset for index 926 (binary 0000000000000000000000000000000000000000000000000000001110011110): 32, 0, 24, 15, 25, 38, 32
The sum is 40 + 84 + 131 + 166 = 421
Writing solution to markshare_m_5_n_40_seed_4.sol
Found feasible solution!
Eval GPU: check results     	 total time     0.01s
Eval GPU: binary search     	 total time     0.00s
Eval GPU: sort required     	 total time     0.01s
Candidate extraction        	 total time     0.00s
List traversal              	 total time     0.03s
Solution time               	 total time     0.23s
Evaluate solutions GPU      	 total time     0.02s
Setup time                  	 total time     0.20s
