Storing mark share instance as markshare_m_5_n_40_seed_5.prb
Running markshare: m=5, n=40, seed=5, iter=0, nthread=24
[
 [ 11  2 43 41 10 18 45 48 24  4 30 19 38 17 25 24 14 49  9 40  4 32 36 40 22 12  7 38 43  5 13 10 20  5 14 43 31 26 28 24 | 482 ]
 [ 29 36 13  0 14  4 12 41 16 41  7 44  8 47 48 28 48  4  9 49  1 23 10 34 34 42 38 30  1 28 28 18  0 34 25 40 31 46 49  0 | 505 ]
 [ 12 36 40 33 43  9 46 34  0 28 23 28 49  3 19  8 40 17 27 30 38  9 24  6  1 46  4 15  5 23 12  3 48 13 31 11 40 47 28 18 | 473 ]
 [ 31 19 40 15 46  9 45 36 41 46  4 34 18 21  1 28 27 10 39  7  2 41  9 42 18 32 12  6 39  8 17 15 31 47 24 11 29 44 46 46 | 518 ]
 [ 47  4  5 40 42 49 17 17  5 24 19 37 25 18 48  1 18  7  0 16 42  5  5 17 23 34 42 39 25 22 22 48 40 25  1 24 28  2 20 12 | 457 ]
]
Running reduced dim shroeppel shamir
Running with 24 threads
Max reducible dimension is 4 (encoded with basis 8001)
Reducing 1 dimensions for Shroeppel-Shamir - leaving 4 for verification
Splitting sets into [0, 9]; [10, 19]; [20, 29]; [30, 40]
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Running the search loop

    1     0.20s [0.000133 GB]:     29 +    453; 7 x 1 possible solutions
    2     0.20s [0.000133 GB]:     33 +    449; 9 x 1 possible solutions
    3     0.20s [0.000133 GB]:     34 +    448; 11 x 2 possible solutions
    4     0.20s [0.000133 GB]:     36 +    446; 11 x 1 possible solutions
    5     0.20s [0.000133 GB]:     38 +    444; 14 x 2 possible solutions
    6     0.20s [0.000133 GB]:     39 +    443; 16 x 2 possible solutions
    7     0.20s [0.000133 GB]:     40 +    442; 17 x 1 possible solutions
    8     0.20s [0.000133 GB]:     41 +    441; 18 x 3 possible solutions
    9     0.20s [0.000133 GB]:     42 +    440; 19 x 1 possible solutions
   10     0.20s [0.000133 GB]:     43 +    439; 21 x 3 possible solutions
   20     0.21s [0.000134 GB]:     53 +    429; 41 x 8 possible solutions
   30     0.21s [0.000135 GB]:     63 +    419; 71 x 16 possible solutions
   40     0.21s [0.000136 GB]:     73 +    409; 121 x 33 possible solutions
   50     0.22s [0.000138 GB]:     83 +    399; 195 x 68 possible solutions
   60     0.22s [0.000141 GB]:     93 +    389; 300 x 125 possible solutions
   70     0.22s [0.000145 GB]:    103 +    379; 449 x 226 possible solutions
   80     0.23s [0.000150 GB]:    113 +    369; 643 x 368 possible solutions
   90     0.23s [0.000156 GB]:    123 +    359; 886 x 555 possible solutions
  100     0.23s [0.000163 GB]:    133 +    349; 1195 x 813 possible solutions
Found market share solution from SS-Algorithm!
Subset for index 647 (binary 0000000000000000000000000000000000000000000000000000001010000111): 11, 2, 43, 48, 4
Subset for index 45 (binary 0000000000000000000000000000000000000000000000000000000000101101): 30, 38, 17, 24
Subset for index 471 (binary 0000000000000000000000000000000000000000000000000000000111010111): 4, 32, 36, 22, 7, 38, 43
Subset for index 93 (binary 0000000000000000000000000000000000000000000000000000000001011101): 13, 20, 5, 14, 31
The sum is 108 + 109 + 182 + 83 = 482
Writing solution to markshare_m_5_n_40_seed_5.sol
Found feasible solution!
Eval GPU: check results     	 total time     0.02s
Eval GPU: binary search     	 total time     0.01s
Eval GPU: sort required     	 total time     0.02s
Candidate extraction        	 total time     0.01s
List traversal              	 total time     0.08s
Solution time               	 total time     0.28s
Evaluate solutions GPU      	 total time     0.06s
Setup time                  	 total time     0.20s
