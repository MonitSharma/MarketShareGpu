Storing mark share instance as markshare_m_5_n_40_seed_3.prb
Running markshare: m=5, n=40, seed=3, iter=0, nthread=24
[
 [ 27  3 35 41 14  6 25 28 44 21 44  0  6  2 10 12  2  4 22 34  1  7 22 22 32 10 13 17 33 24 29 45  1 38 27 48 12 20 20 27 | 414 ]
 [ 14 15 34 29 22 13  7 22 27 37 39 40 15 12 11 44 19 35 46  1 48  7 33 16 45 40 42 19 18 21  4 20 32 39 27 35 18  1 11 15 | 486 ]
 [ 20 28 23 37 13 30 14 10 22 32 43 33 29 43 14 40 13 18 22  3 10 38 10  3 25 42  4 34 24 22 18 18 35 25 37 22 34 40 34 15 | 488 ]
 [ 18 42 33 24 16 27 28 41 16 26 22  7  3 15 12 40 48 15 11  1 34 24 32  1 36 25 23 45 29 10  3 46  3 13  9  8  7 49  5 34 | 440 ]
 [  6 37 27  5  9  4 47 33 34 16 27 18 35 26 13 21 46 40 41 28 36 44 24 40 42 17 37 38 33 44 45 39 31 14 18 44 27 27  9 41 | 581 ]
]
Running reduced dim shroeppel shamir
Running with 24 threads
Max reducible dimension is 4 (encoded with basis 8001)
Reducing 1 dimensions for Shroeppel-Shamir - leaving 4 for verification
Splitting sets into [0, 9]; [10, 19]; [20, 29]; [30, 40]
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Generating 1024 possible subsets for as set of size 10.
Running the search loop

    1     0.20s [0.000133 GB]:      0 +    414; 2 x 18 possible solutions
    2     0.20s [0.000133 GB]:      2 +    412; 4 x 15 possible solutions
    3     0.20s [0.000133 GB]:      3 +    411; 2 x 17 possible solutions
    4     0.20s [0.000133 GB]:      4 +    410; 4 x 20 possible solutions
    5     0.20s [0.000133 GB]:      5 +    409; 4 x 21 possible solutions
    6     0.20s [0.000133 GB]:      6 +    408; 8 x 30 possible solutions
    7     0.20s [0.000133 GB]:      7 +    407; 4 x 30 possible solutions
    8     0.20s [0.000134 GB]:      8 +    406; 10 x 29 possible solutions
    9     0.20s [0.000134 GB]:      9 +    405; 8 x 33 possible solutions
   10     0.20s [0.000134 GB]:     10 +    404; 10 x 33 possible solutions
   20     0.21s [0.000135 GB]:     20 +    394; 28 x 64 possible solutions
   30     0.21s [0.000137 GB]:     30 +    384; 60 x 123 possible solutions
   40     0.21s [0.000140 GB]:     40 +    374; 120 x 223 possible solutions
   50     0.22s [0.000144 GB]:     50 +    364; 236 x 371 possible solutions
   60     0.22s [0.000149 GB]:     60 +    354; 398 x 577 possible solutions
   70     0.22s [0.000158 GB]:     70 +    344; 652 x 850 possible solutions
   80     0.23s [0.000168 GB]:     80 +    334; 1022 x 1216 possible solutions
   90     0.23s [0.000178 GB]:     90 +    324; 1470 x 1692 possible solutions
  100     0.23s [0.000191 GB]:    100 +    314; 2022 x 2264 possible solutions
Found market share solution from SS-Algorithm!
Subset for index 599 (binary 0000000000000000000000000000000000000000000000000000001001010111): 27, 3, 35, 14, 25, 21
Subset for index 4 (binary 0000000000000000000000000000000000000000000000000000000000000100): 6
Subset for index 567 (binary 0000000000000000000000000000000000000000000000000000001000110111): 1, 7, 22, 32, 10, 24
Subset for index 799 (binary 0000000000000000000000000000000000000000000000000000001100011111): 29, 45, 1, 38, 27, 20, 27
The sum is 125 + 6 + 96 + 187 = 414
Writing solution to markshare_m_5_n_40_seed_3.sol
Found feasible solution!
Eval GPU: check results     	 total time     0.02s
Eval GPU: binary search     	 total time     0.00s
Eval GPU: sort required     	 total time     0.01s
Candidate extraction        	 total time     0.01s
List traversal              	 total time     0.05s
Solution time               	 total time     0.25s
Evaluate solutions GPU      	 total time     0.04s
Setup time                  	 total time     0.20s
